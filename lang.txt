program
    = {decl}
decl
    = MODULE C_ID
    | IMPORT C_ID [AS C_ID]
    | DECL ID ':' type
    | type_decl
    | expr
expr
    = LET [REC] id_pat [':' type] '=' expr
    | FUN ID [':' type] ('=' | '|') params '->' expr {'|' params '->' expr}
    | FUN ID [':' type} a_params '=' expr
    | FN params '->' expr {'|' params '->' expr}
    | IF expr THEN expr [ELSE expr]
    | MATCH expr '{' match_list '}'
    | '{' {expr} '}'
    | logical_expr
id_pat
    = param
    | '()' | '(' id_pat {',' id_pat} ')'
a_params
    = '()' | param {param}
param
    = ID | '_'
params
    = '()' | pattern {pattern} [WHEN expr]
match_list
    = ['|'] match {'|' match }
match
    = pattern [WHEN expr] '->' expr
pattern
    = or_pattern [AS ID]
or_pattern
    = cons_pattern {'|' cons_pattern}
cons_pattern
    = a_pattern {':' a_pattern}
a_pattern
    = '[]'
    | '_'
    | ID
    | BOOL_LIT | FLOAT_LIT | STRING_LIT
    | INT_LIT ['..' INT_LIT]
    | CHAR_LIT ['..' CHAR_LIT]
    | '(' pattern_list ')'
    | '[' pattern_list ']'
    | constr pattern
    | constr '{' [pattern {',' pattern}] '}'
pattern_list
    = pattern
    | pattern ',' pattern_list
constr
    = {C_ID '.'} C_ID

type_decl
    = TYPE type_def {AND type_def}
type_def
    = [type_params] ID type_info
type_info
    = type_equation | type_representation
type_equation
    = '=' type
type_representation
    = '=' ['|'] constr_decl {'|' constr_decl}
    | '=' record_decl
type_params
    =  T_VAR
    | '(' T_VAR {',' T_VAR ')'
record_decl
    = '{' field_decl {';' field_decl} [';'] '}'
constr_decl
    = C_ID [type]
field_decl
    = [MUTABLE] ID '::' poly_typexpr

type
    = tuple_type ['->' type]
tuple_type
    = constr_type {'*' constr_type}
constr_type
    = a_type [type_constr]
a_type
    = T_VAR
    | '(' type ')'
    | '(' type {',' type} ')' type_constr
    | type_constr

type_constr
    = { C_ID '.' } ID
(*
    | UNIT | BOOL | INT | CHAR | FLOAT | STRING
    | LIST | REF
*)

logical_expr
    = equal_expr {logical_op equal_expr}
equal_expr
    = cons_expr [equal_op cons_expr]
cons_expr
    = add_expr {':' add_expr}
add_expr
    = mul_expr {add_op mul_expr}
mul_expr
    = apply_expr {mul_op apply_expr}
apply_expr
    = unary_expr {simple_expr}
unary_expr
    = [unary_op] simple_expr
simple_expr
    = id_expr | c_id_expr
    | BOOL_LIT | INT_LIT | CHAR_LIT | FLOAT_LIT | STRING_LIT 
    | '()' | '(' expr {',' expr} ')'
    | '[' [expr {',' expr}] ']'
id_expr
    = ID {'.' ID} [assign]
c_id_expr
    = C_ID {'.' C_ID} ['{' [expr {',' expr}] '}']
    | C_ID {'.' C_ID} expr
    | C_ID ['.' id_expr]
assign
    = '<-' expr
    | ':=' expr

logical_op = '||' | '&&'
equal_op = '==' | '!=' | '<' | '<=' | '>' | '>='
add_op = '+' | '-'
mul_op = '*' | '/' | '%'
unary_op = '!' | '-' | '&' | '*'

module import as decl type and let rec fun fn
if then else match when mutable
unit bool int char float string

ID C_ID BOOL_LIT INT_LIT CHAR_LIT STRING_LIT
_ + * % , ; . ..
- -> = == ! != < <= <- > >= : :=
| || & && [ ] [] ( ) () { } /


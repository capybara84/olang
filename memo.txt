* Function

fun fact :: int -> int
        = 0 -> 1
        | n -> n * fact (n-1)

fun fact :: int -> int
    | n when n == 0 -> 1
    | n -> n * fact (n-1)

fun length :: [a] -> int
    | [] -> 0
    | _:xs -> 1 + length xs

fun add :: int -> int -> int
    = x y -> x + y

let add = fn x y -> x + y 

let inc = add 1

let rec fact = 0 -> 1 | n -> n * fact (n-1)

let rec length =
    fn [] -> []
    | _:xs -> 1 + length xs

* Bind

let x = 1


* Compound

{ a; b; c; }

* Match

match a {
    | x when p -> ...
    | y -> ...
    | _ -> ...
}


* List

    [1,2,3]
    1:2:[3]
    1:2:3:[]
    x:xs

* Tuple

    (1,2,3)
    ("abc", 100)


* Record

    type point = { x : int; y : int }
    point { x = 1, y = 2 }
    point { 1, 2 }

    val p = point {1, 2}
    p.x

* Variant

    type color = Red | Green | Blue | RGB (int * int * int)


* Type

    int
    int list
    (int * int)
    int -> int

    type integer = int
    type 'a option = None | Some 'a
    type ('a, 'b) pair = Pair ('a * 'b)

* assignment

    let x = & 0
    x := *x + 1
    
    let x = ref 0
    x := *x + 1

* comment

    // ...

    /* ... */
    /* /* ... */ */

* module

module List
fun map :: ('a -> 'b) ['a] -> ['b]
    | _ [] -> []
    | f x:xs -> (f x) : (map f xs)

fun append :: ['a] -> ['a] -> ['a]
    | [] lst -> lst
    | x:xs lst -> x : (append xs lst)

fun reverse :: ['a] -> ['a]
    | [] -> []
    | x:xs -> append (reverse xs) [x]

fun length :: ['a] -> int
    | [] -> 0
    | x:xs -> 1 + length xs

import List as L
L.length [1,2,3]


* and

fun take :: ['a] -> 'a
    | [] -> []
    | x:xs -> x:(skip xs)
and skip :: ['a] -> 'a
    | [] -> []
    | x:xs -> take xs

-or-

decl take :: ['a] -> 'a
decl skip :: ['a] -> 'a

* 

fun add :: int -> int -> int
    | x 0 -> x
    | 0 y -> y
    | x y -> x + y

fun add x y = x + y
fun add = x y -> x + y

*

type 'a point = 'a * 'a

(1,2) (* int point *)

type ('a,'b) pair = 'a * 'b

decl t :: (string, int) pair

("abc", 10) (* (string, int) pair *)

int ref

let a = & 1

--
type

type integer = int
type c = char and s = string
type c = char and s = string and i = int
type f = unit -> int
type f = int -> int -> int
type 'a f = 'a -> 'a -> 'a
type 'a x = 'a
type t = int * char
type f = (float)
type l = int list
type 'a r = 'a ref
type 'a pair = ('a * 'a)
type ('a, 'b) pair = ('a * 'b)
type point2d = { mutable x :: int; mutable y :: int }
type 'a point2d = { x :: 'a; y :: 'a }
type ('a,'b,'c) atob = { a :: 'a; b :: 'b; c :: 'c }
type color = | Red | Green | Blue
type color = Red | Green | Blue
type color = Red | Green | Blue | RGB (int * int * int)
type 'a option = None | Some 'a
type 'a tree = Node 'a | Leaf ('a tree * 'a tree)
type itree = int tree
type lt = List.t

("type integer = int", (2, TypeDecl ("integer", [], TTypeDecl (TConstr (([], "int"), None)))));
("type c = char and s = string", (3, TypeDeclAnd [(2, TypeDecl ("c", [], TTypeDecl (TConstr (([], "char"), None)))); (3, TypeDecl ("s", [], TTypeDecl (TConstr (([], "string"), None))))]));
("type x = char and y = string and z = int", (4, TypeDeclAnd [(3, TypeDecl ("x", [], TTypeDecl (TConstr (([], "char"), None)))); (3, TypeDecl ("y", [], TTypeDecl (TConstr (([], "string"), None)))); (4, TypeDecl ("z", [], TTypeDecl (TConstr (([], "int"), None))))]));
("type f = (unit -> int)", (5, TypeDecl ("f", [], TTypeDecl (TFun (TConstr (([], "unit"), None), TConstr (([], "int"), None))))));
("type f = (int -> (int -> int))", (6, TypeDecl ("f", [], TTypeDecl (TFun (TConstr (([], "int"), None), TFun (TConstr (([], "int"), None), TConstr (([], "int"), None)))))));
("type 'a f = ('a -> ('a -> 'a))", (7, TypeDecl ("f", [0], TTypeDecl (TFun (TVar (0, ref None), TFun (TVar (0, ref None), TVar (0, ref None)))))));
("type 'a x = 'a", (8, TypeDecl ("x", [0], TTypeDecl (TVar (0, ref None)))));
("type t = (int * char)", (9, TypeDecl ("t", [], TTypeDecl (TTuple [TConstr (([], "int"), None); TConstr (([], "char"), None)]))));
("type f = float", (10, TypeDecl ("f", [], TTypeDecl (TConstr (([], "float"), None)))));
("type l = (int list)", (11, TypeDecl ("l", [], TTypeDecl (TConstr (([], "list"), Some (TConstr (([], "int"), None)))))));
("type 'a r = ('a ref)", (12, TypeDecl ("r", [0], TTypeDecl (TConstr (([], "ref"), Some (TVar (0, ref None)))))));
("type 'a pair = ('a * 'a)", (13, TypeDecl ("pair", [0], TTypeDecl (TTuple [TVar (0, ref None); TVar (0, ref None)]))));
("type  ('a, 'b) pair = ('a * 'b)", (14, TypeDecl ("pair", [0; 1], TTypeDecl (TTuple [TVar (0, ref None); TVar (1, ref None)]))));

("type point2d = { mutable x :: int; mutable y :: int; }", (14, TypeDecl ("point2d", [], TRecordDecl [("x", TConstr (([], "int"), None), Mutable); ("y", TConstr (([], "int"), None), Mutable)])));
("type 'a point2d = { x :: 'a; y :: 'a; }", (15, TypeDecl ("point2d", [0], TRecordDecl [("x", TVar (0, ref None), Immutable); ("y", TVar (0, ref None), Immutable)])));
("type  ('a, 'b, 'c) atob = { a :: 'a; b :: 'b; c :: 'c; }", (16, TypeDecl ("atob", [0; 1; 2], TRecordDecl [("a", TVar (0, ref None), Immutable); ("b", TVar (1, ref None), Immutable); ("c", TVar (2, ref None), Immutable)])));
("type color =  | Red | Green | Blue", (18, TypeDecl ("color", [], TVariantDecl [("Red", None); ("Green", None); ("Blue", None)])));
("type color =  | Red | Green | Blue", (19, TypeDecl ("color", [], TVariantDecl [("Red", None); ("Green", None); ("Blue", None)])));
("type color =  | Red | Green | Blue | RGB (int * int * int)", (20, TypeDecl ("color", [], TVariantDecl [("Red", None); ("Green", None); ("Blue", None); ("RGB", Some (TTuple [TConstr (([], "int"), None); TConstr (([], "int"), None); TConstr (([], "int"), None)]))])));

("type 'a option =  | None | Some 'a", (21, TypeDecl ("option", [0], TVariantDecl [("None", None); ("Some", Some (TVar (0, ref None)))])));
("type 'a tree =  | Node 'a | Leaf (('a tree) * ('a tree))", (22, TypeDecl ("tree", [0], TVariantDecl [("Node", Some (TVar (0, ref None))); ("Leaf", Some (TTuple [TConstr (([], "tree"), Some (TVar (0, ref None))); TConstr (([], "tree"), Some (TVar (0, ref None)))]))])));
("type itree = (int tree)", (23, TypeDecl ("itree", [], TTypeDecl (TConstr (([], "tree"), Some (TConstr (([], "int"), None)))))));
("type lt = List.t", (25, TypeDecl ("lt", [], TTypeDecl (TConstr ((["List"], "t"), None)))));
